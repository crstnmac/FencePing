# Multi-stage build for Next.js 15 production with Tailwind v4
FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files for better Docker layer caching
COPY package*.json ./
COPY turbo.json ./
COPY packages/shared/package*.json ./packages/shared/
COPY packages/db/package*.json ./packages/db/
COPY apps/dashboard/package*.json ./apps/dashboard/

# Enable corepack to handle packageManager field
RUN corepack enable npm

# Install ALL dependencies (including devDependencies) for Tailwind v4 to work in production
RUN npm ci --include=optional --include=dev && npm cache clean --force

# Build the source code
FROM base AS builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy all source files
COPY . .

# Set environment variables for optimized builds
ENV TURBO_DAEMON=false
ENV CI=1
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Build dashboard with standalone output for optimal Docker image size
RUN npm run build:dashboard

# Debug: List what was created after build
RUN ls -la /app/apps/dashboard/ && ls -la /app/apps/dashboard/public || echo "No public directory found"

# Production runtime image
FROM node:20-alpine AS runner
RUN apk add --no-cache dumb-init
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000

# Create system user for security
RUN addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 nextjs

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/apps/dashboard/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/apps/dashboard/.next/static ./.next/static

# Note: In Next.js standalone mode, public assets are typically handled differently
# Static assets are served from the .next/static directory instead

USER nextjs

EXPOSE 3000

ENV HOSTNAME="0.0.0.0"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Health check optimized for standalone mode
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/api/health 2>/dev/null || exit 1

CMD ["node", "server.js"]